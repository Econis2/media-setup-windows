function Start-FileDownload {
    [CmdletBinding()]
    param (
        [Parameter(Mandatory=$true)]
        [string]$Url,

        [Parameter(Mandatory=$true)]
        [string]$Path,

        [Parameter(Mandatory=$true)]
        [ref]$Process
    )

    $PWSH_PATH = "$env:SystemRoot\system32\WindowsPowershell\v1.0\powershell.exe"

    $command = 
@"
    [Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12
    [System.Net.WebClient]::new().DownloadFile('$Url', '$PATH')
"@

    $EncodedCommand = [Convert]::ToBase64String( ([System.Text.Encoding]::Unicode.GetBytes($command)) )
    $Process = Start-Process -FilePath $PWSH_PATH -WindowStyle Hidden -PassThru -ArgumentList "-encodedCommand $EncodedCommand"

}

function Wait-DownloadCompletion {
    [CmdletBinding(DefaultParameterSetName="Single")]
    param (
        [Parameter(Mandatory=$true, Position=0,ParameterSetName="Multi")]
        [array]$Downloads,

        [Parameter(Mandatory=$true, Position=0,ParameterSetName="Single")]
        $Download,

        [Parameter(Position=1)]
        [switch]$ShowProgress    
    )
    

    switch($PSCmdlet.ParameterSetName){
        "Single" { Wait-Single -Process $Download }

        "Multi" {
            $Download.forEach({

            })
        }
    }

}
function Wait-Multi {
    [CmdletBinding()]
    param (
        [Parameter(Mandatory=$true)]
        [array]$Multi
    )
}

function Wait-Single {
    [CmdletBinding(DefaultParameterSetName="id")]
    param (
        [Parameter(Mandatory=$true, Position=0, ParameterSetName="id")]
        $Id,

        [Parameter(Mandatory=$true, Position=0, ParameterSetName="process")]
        $Process,

        [Parameter(Mandatory=$true, Position=1)]
        [ref]$ExitStatus
    )
    switch($PSCmdlet.ParameterSetName){
        "id" {
            # Get Process and Use it
            try{ $Download = Get-Process -Id $Id.id -ErrorAction Stop }
            catch{
                $ExitStatus.Value = 500
                return
            }
        }
        "process" { $Download = $Process }
    }
    $timer = [System.Diagnostics.Stopwatch]::new() # Create Timer for Download Stats tracking
    $Single = 0 # This increments the Progress Bar - We dont know the File size, so we cannot estimate bytes / percentage
    $timer.start()
    while(!$Download.HasExited){
        if($ShowProgress){
            Write-Progress -PercentComplete $Single -Activity "Elapsed..." -Status "Hours:$($timer.Elapsed.Hours) Minutes:$($timer.Elapsed.Minutes) Seconds:$($timer.Elapsed.Seconds)"
            if($Single -lt 100){ $Single++ }
            else{ $Single = 0}
        }
        Start-Sleep -s 1
    }
    $ExitStatus.Value = 200
    return
}

function Start-SingleDownload{
    [CmdletBinding()]
    param (
        [Parameter()]
        [TypeName]
        $ParameterName
    )

    $TransferJob = Start-BitsTransfer -Source $Url -Destination $Path -TransferType Download -Asynchronous

    $finished = $false

    while(!$finished){
        $state = 

        if( $TransferJob.JobState.ToString() -eq "Transferred" ){ $finished = $true }
        Write-Progress -Activity

    }
}

function Start-MultiDownload{
    [CmdletBinding()]
    param (
        [Parameter()]
        [array]
        $ParameterName
    )
}